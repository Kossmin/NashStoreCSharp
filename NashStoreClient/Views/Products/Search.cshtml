
@model DTO.Models.ViewListModel<ViewProductModel>

@{
    ViewData["Title"] = "Search";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var Type = ViewData["SearchType"] as string;
    var Name = ViewData["SearchName"] as string;
}

<h1>Index</h1>

<div class="container-fluid">
    <div>
        <form asp-action="Search" asp-controller="Products">
            <select name="searchType" class ="form-control" asp-items="ViewBag.CategoryId"></select>
            <input class="form-control type="text" name="searchName"/>
            <button class="form-control">Search</button>
            <a asp-action="Index"  class="btn btn-primary">Show all</a>
        </form>
    </div>
    <div class="row">
        @foreach (var item in Model.ModelDatas)
        {
            <div class="card col-md-3 me-2">
                <img src=@item.Product.ImgUrl class="card-img-top" alt="...">
                  <div class="card-body">
                    <h5 class="card-title">@item.Product.Name</h5>
                    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                    <a asp-action="Details" asp-route-id="@item.Product.ID"  class="btn btn-primary">Details</a>
                  </div>
                </div>
        }
    </div>
</div>

<nav aria-label="...">
  <ul class="pagination">
        @if(Model.MaxPage > 1 && Model.PageIndex != 1)
        {
            <li class="page-item">
                @Html.ActionLink("Previous", "Search", "Products",new {pageIndex = Model.PageIndex - 1, searchType = Type, searchName = Name}, new {@class = "page-link"})
            </li>
        }
        else
        {
            <li class="page-item disabled">
                @Html.ActionLink("Previous", "Search", "Products",new {pageIndex = 1, searchType = Type, searchName = Name}, new {@class = "page-link"})
            </li>
        }
        @{
            if(Model.MaxPage <= 3)
            {
                for (int i = 1; i <= Model.MaxPage ; i++)
                {
                    if(i == Model.PageIndex)
                    {
                        <li class="page-item active" aria-current="page">
                            @Html.ActionLink(i.ToString(), "Search", "Products",new {pageIndex = i, searchType = Type, searchName = Name}, new {@class = "page-link"})
                        </li>
                    }
                    else
                    {
                        <li class="page-item" aria-current="page">
                            @Html.ActionLink(i.ToString(), "Search", "Products",new {pageIndex = i, searchType = Type, searchName = Name}, new {@class = "page-link"})
                        </li>
                    }
                }
            }
            else
            {
                if(Model.PageIndex == 1)
                {
                    for (int i = Model.PageIndex; i <= 3; i++)
                    {
                        if(i == Model.PageIndex)
                        {
                            <li class="page-item active" aria-current="page">
                                @Html.ActionLink(i.ToString(), "Search", "Products",new {pageIndex = i, searchType = Type, searchName = Name}, new {@class = "page-link"})
                            </li>
                        }
                        else
                        {
                            <li class="page-item" aria-current="page">
                                @Html.ActionLink(i.ToString(), "Search", "Products",new {pageIndex = i, searchType = Type, searchName = Name}, new {@class = "page-link"})
                            </li>
                        }
                    }
                }else if(Model.PageIndex == Model.MaxPage)
                {
                    for (int i = Model.PageIndex-2; i <= Model.MaxPage; i++)
                    {
                        if(i == Model.PageIndex)
                        {
                            <li class="page-item active" aria-current="page">
                                @Html.ActionLink(i.ToString(), "Search", "Products",new {pageIndex = i, searchType = Type, searchName = Name}, new {@class = "page-link"})
                            </li>
                        }
                        else
                        {
                            <li class="page-item" aria-current="page">
                                @Html.ActionLink(i.ToString(), "Search", "Products",new {pageIndex = i, searchType = Type, searchName = Name}, new {@class = "page-link"})
                            </li>
                        }
                    }
                }
                else
                {
                    for (int i = Model.PageIndex-1; i <= Model.PageIndex + 1; i++)
                    {
                        if(i == Model.PageIndex)
                        {
                            <li class="page-item active" aria-current="page">
                                @Html.ActionLink(i.ToString(), "Search", "Products",new {pageIndex = i, searchType = Type, searchName = Name}, new {@class = "page-link"})
                            </li>
                        }
                        else
                        {
                            <li class="page-item" aria-current="page">
                                @Html.ActionLink(i.ToString(), "Search", "Products",new {pageIndex = i, searchType = Type, searchName = Name}, new {@class = "page-link"})
                            </li>
                        }
                    }
                }
            }
        }
        @if(Model.PageIndex != Model.MaxPage)
        {
            <li class="page-item">
                @Html.ActionLink("Next", "Search", "Products",new {pageIndex = Model.PageIndex + 1, searchType = Type, searchName = Name}, new {@class = "page-link"})
            </li>
        }
        else
        {
            <li class="page-item disabled">
                @Html.ActionLink("Next", "Search", "Products",new {pageIndex = 1, searchType = Type, searchName = Name}, new {@class = "page-link"})
            </li>
        }
  </ul>
</nav>